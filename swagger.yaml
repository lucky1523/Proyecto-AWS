openapi: 3.0.0

paths:
  /voter/{voter_id}:
    get:
      summary: Returns voter info
      parameters:
        - name: voter_id
          in: path
          required: true
          description: voter ID
        - in: query
          name: date
          required: false
          description: date
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getVoter/invocations"
        httpMethod: "POST"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods : "'*'"
              method.response.header.Access-Control-Allow-Origin : "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
    put:
      summary: Create or update new record for voter
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
               type: string
            Access-Control-Allow-Methods:
              schema:
               type: string
            Access-Control-Allow-Headers:
              schema:
               type: string
          content: {}
      parameters:
        - name: voter_id
          in: path
          required: true
          description: voter ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name_voter:
                  type: string
                city:
                  type: string
                school:
                  type: string
                booth:
                  type: string
                timeOfArrival:
                  type: string
                country:
                  type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putVoter/invocations"
        httpMethod: "POST"
  /absentee/{absentee_id}:
    get:
      summary: Returns absentee info
      parameters:
        - name: absentee_id
          in: path
          required: true
          description: absentee ID
        - in: query
          name: date
          required: false
          description: date
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getAbsentee/invocations"
        httpMethod: "POST"
    put:
      summary: update absentee
      parameters:
        - name: absentee_id
          in: path
          required: true
          description: absentee ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name_voter:
                  type: string
                city:
                  type: string
                school:
                  type: string
                booth:
                  type: string
                country:
                  type: string
                absentee:
                  type: boolean
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putAbsentee/invocations"
        httpMethod: "POST"

 